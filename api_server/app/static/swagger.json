{
  "swagger": "2.0",
  "info": {
    "title": "ASDInsight API",
    "version": "1.0",
    "description": "API for ASDInsight"
  },
  "basePath": "/",
  "schemes": [ "http", "https" ],
  "consumes": [ "application/json" ],
  "produces": [ "application/json" ],
  "paths": {
   "/data-processing/get-eye-data": {
      "get": {
        "summary": "API 1",
        "description": "get data from database",
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "msg": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/eye-tracking/upload-eye-image": {
      "post": {
        "summary": "Upload an image for eye tracking",
        "description": "Uploads an image file for eye tracking analysis.",
        "consumes": ["multipart/form-data"],
        "parameters": [
          {
            "name": "file",
            "in": "formData",
            "type": "file",
            "required": true,
            "description": "The image file to upload"
          },
          {
            "name": "category",
            "in": "formData",
            "type": "string",
            "required": true,
            "description": "The category of the uploaded image (e.g., train, test, valid)"
          },
          {
            "name": "class",
            "in": "formData",
            "type": "string",
            "required": true,
            "description": "The class of the uploaded image (e.g., Autistic, Non_Autistic)"
          }
        ],
        "responses": {
          "200": {
            "description": "Image uploaded successfully",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Success message"
                },
                "file_path": {
                  "type": "string",
                  "description": "Path where the file is stored"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (e.g., missing file or invalid parameters)"
          }
        }
      }
    },
    "/eye-tracking/process-eye-images": {
      "post": {
        "summary": "Process eye images",
        "description": "Processes eye images uploaded to the server's upload directory.",
        "responses": {
          "200": {
            "description": "Image processing completed successfully",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Success message"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "description": "Error message"
                }
              }
            }
          }
        }
      }
    },
    "/eye-tracking/extract-eye-features": {
      "post": {
        "summary": "Extract eye features from images in directory",
        "description": "Extract eye features such as fixations, intensity, etc., from images stored in the directory.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/data-processing/preprocess-eye-data": {
      "post": {
        "summary": "API 2",
        "description": "Post data with input",
        "parameters": [
          {
            "name": "example_data",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "key": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "msg": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/model_training/model-training": {
      "post": {
        "summary": "API 2",
        "description": "Train with usecase name(eye_tracking,qchat)",
        "parameters": [
          {
            "name": "usecase_name",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "key": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Training",
            "schema": {
              "type": "object",
              "properties": {
                "msg": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "UnSuccessful Training",
            "schema": {
              "type": "object",
              "properties": {
                "msg": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/predict-eyebased": {
  "post": {
    "summary": "Upload/Capture an image",
    "description": "Uploads an image file for autism prediction",
    "consumes": ["multipart/form-data"],
    "parameters": [
      {
        "name": "file",
        "in": "formData",
        "type": "file",
        "required": true,
        "description": "The image file to upload"
      }
    ],
    "responses": {
      "200": {
        "description": "Prediction result",
        "schema": {
          "type": "object",
          "properties": {
            "prediction": {
              "type": "string",
              "description": "Prediction result: 'Autistic' or 'Not Autistic'"
            }
          }
        }
      },
      "400": {
        "description": "Bad request (e.g., missing file or invalid parameters)"
      }
    }
  }
},
  "/qchat-screening/predict-qchat-asdrisk": {
    "post": {
      "summary": "Predict ASD Risk",
      "description": "Predict the risk of ASD based on input features.",
      "consumes": ["application/json"],
      "parameters": [
        {
          "in": "body",
          "name": "body",
          "description": "Input data for prediction",
          "schema": {
            "type": "object",
            "required": [
              "age",
              "sex",
              "preterm",
              "birthweight",
              "siblings_yesno",
              "siblings_number",
              "mothers_education",
              "sibling_withASD",
              "Sum_QCHAT",
              "qchat1recode",
              "qchat2recode",
              "qchat3recode",
              "qchat4recode",
              "qchat5recode",
              "qchat6recode",
              "qchat7recode",
              "qchat8recode",
              "qchat9recode",
              "qchat10recode",
              "qchat11recode",
              "qchat12recode",
              "qchat13recode",
              "qchat14recode",
              "qchat15recode",
              "qchat16recode",
              "qchat17recode",
              "qchat18recode",
              "qchat19recode",
              "qchat20recode",
              "qchat21recode",
              "qchat22recode",
              "qchat23recode",
              "qchat24recode",
              "qchat25recode"
            ],
            "properties": {
              "age": {
                "type": "integer",
                "example": 1
              },
              "sex": {
                "type": "integer",
                "example": 1
              },
              "preterm": {
                "type": "integer",
                "example": 0
              },
              "birthweight": {
                "type": "number",
                "example": 3.08
              },
              "siblings_yesno": {
                "type": "integer",
                "example": 1
              },
              "siblings_number": {
                "type": "integer",
                "example": 1
              },
              "mothers_education": {
                "type": "integer",
                "example": 3
              },
              "sibling_withASD": {
                "type": "integer",
                "example": 1
              },
              "Sum_QCHAT": {
                "type": "integer",
                "example": 52
              },
              "qchat1recode": {
                "type": "integer",
                "example": 2
              },
              "qchat2recode": {
                "type": "integer",
                "example": 1
              },
              "qchat3recode": {
                "type": "integer",
                "example": 0
              },
              "qchat4recode": {
                "type": "integer",
                "example": 4
              },
              "qchat5recode": {
                "type": "integer",
                "example": 3
              },
              "qchat6recode": {
                "type": "integer",
                "example": 2
              },
              "qchat7recode": {
                "type": "integer",
                "example": 3
              },
              "qchat8recode": {
                "type": "integer",
                "example": 3
              },
              "qchat9recode": {
                "type": "integer",
                "example": 2
              },
              "qchat10recode": {
                "type": "integer",
                "example": 2
              },
              "qchat11recode": {
                "type": "integer",
                "example": 2
              },
              "qchat12recode": {
                "type": "integer",
                "example": 2
              },
              "qchat13recode": {
                "type": "integer",
                "example": 3
              },
              "qchat14recode": {
                "type": "integer",
                "example": 2
              },
              "qchat15recode": {
                "type": "integer",
                "example": 2
              },
              "qchat16recode": {
                "type": "integer",
                "example": 2
              },
              "qchat17recode": {
                "type": "integer",
                "example": 2
              },
              "qchat18recode": {
                "type": "integer",
                "example": 3
              },
              "qchat19recode": {
                "type": "integer",
                "example": 2
              },
              "qchat20recode": {
                "type": "integer",
                "example": 2
              },
              "qchat21recode": {
                "type": "integer",
                "example": 1
              },
              "qchat22recode": {
                "type": "integer",
                "example": 2
              },
              "qchat23recode": {
                "type": "integer",
                "example": 2
              },
              "qchat24recode": {
                "type": "integer",
                "example": 1
              },
              "qchat25recode": {
                "type": "integer",
                "example": 2
              }
            }
          }
        }
      ],
      "responses": {
        "200": {
          "description": "Prediction result",
          "schema": {
            "type": "object",
            "properties": {
              "prediction": {
                "type": "string",
                "description": "Prediction result: 'High Risk' or 'Low Risk'"
              }
            }
          }
        },
        "400": {
          "description": "Bad request (e.g., missing or invalid input data)"
        },
        "500": {
          "description": "Internal server error"
        }
      }
    }
  },

  
    "/model_registery/model-saving": {
      "post": {
        "summary": "API 2",
        "description": "Post data with input",
        "parameters": [
          {
            "file_name": "file_name",
            "file_path": "file_path",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "key": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "msg": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/qchat-screening/collect-qchatdata": {
      "post": {
        "summary": "Collect QCHAT-10 responses",
        "description": "Collect QCHAT-10 responses and store it in database",
        "responses": {
          "200": {
            "description": "QChat-10 data stored successfully",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Success message"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "description": "Error message"
                }
              }
            }
          }
        }
      }
    },
    "/qchat-screening/get-qchat-data": {
      "get": {
        "summary": "To fetch questionnaire responses from DB",
        "description": "get data from database",
        "responses": {
          "200": {
            "description": "QCHAT data fetched successfully",
            "schema": {
              "type": "object",
              "properties": {
                "msg": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/qchat-screening/preprocess-qchatdata": {
      "post": {
        "summary": "Preprocess questionnaire data",
        "description": "Perform basic pre-processing steps such as handling missing values",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Questionnaire responses pre-processed successfully",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/full_eda": {
      "post": {
        "tags": ["eda"],
        "summary": "Run full EDA on images",
        "description": "Processes images in the specified folder, performs EDA, preprocesses data, and performs hypothesis testing.",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Folder path for images",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "image_folder": {
                  "type": "string",
                  "example": "/path/to/image_folder"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "plot_url": {
                  "type": "string",
                  "description": "Base64 encoded plot image"
                },
                "pipeline_image": {
                  "type": "string",
                  "description": "Base64 encoded pipeline image"
                },
                "processed_data": {
                  "type": "array",
                  "items": {
                    "type": "array",
                    "items": {
                      "type": "number"
                    }
                  },
                  "description": "Processed data"
                },
                "t_test": {
                  "type": "object",
                  "properties": {
                    "t_stat": {
                      "type": "number"
                    },
                    "p_value": {
                      "type": "number"
                    },
                    "significant": {
                      "type": "boolean"
                    }
                  }
                },
                "wilcoxon_test": {
                  "type": "object",
                  "properties": {
                    "wilcoxon_stat": {
                      "type": "number"
                    },
                    "p_value": {
                      "type": "number"
                    },
                    "significant": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },

    "/health": {
      "get": {
        "summary": "Health check endpoint",
        "responses": {
          "200": {
            "description": "Healthy status",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "description": "Health status"
                }
              }
            }
          }
        }
      }
    }
  }
}